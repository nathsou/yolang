
let SIZEOF_U32 = 4;

struct Array {
  start: Ptr<u32>,
  mut length: u32,
}

impl Array {
  fn read(self, n) unsafe {
    *(((self.start as u32) + n * SIZEOF_U32) as Ptr<u32>)
  }

  fn write(mut self, n, val) unsafe {
    *(((self.start as u32) + n * SIZEOF_U32) as Ptr<u32>) = val;
  }

  fn push(mut self, val) {
    self.write(self.length, val);
    self.length += 1;
  }
}

struct Sieve {
  mut primes: Array,
  mut current: u32
}

impl Sieve {
  fn clear(mut self) {
    self.primes.length = 0;
    // 2 is the first prime
    self.primes.push(2);
    self.current = 1;
  }

  fn isPrime(mut self, n) {
    mut i = 0;
    mut p = self.primes.read(i);

    while p * p <= n {
      if n % p == 0 { return false; }
      i += 1;
      p = self.primes.read(i);
    }

    // n is prime
    // add it to the sieve
    self.primes.push(n);

    true
  }

  fn nextPrime(mut self) {
    self.current += 2;

    while !self.isPrime(self.current) {
      self.current += 2;
    }

    self.current
  }

  // count the prime numbers <= m
  fn countUpTo(mut self, m) {
    self.clear();

    while self.current <= m {
      self.nextPrime();
    }

    self.primes.length - 1
  }
}

// right after the shadow stack
let PRIMES_START = 64 * 1024;

fn main() {
  mut sieve = Sieve {
    primes: Array {
      start: PRIMES_START as Ptr<u32>,
      length: 0
    },
    current: 0
  };

  sieve.countUpTo(10000000)
}
