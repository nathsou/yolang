
let SIZEOF_U32 = 4;

fn read(addr) {
  *((addr * SIZEOF_U32) as Ptr<u32>)
}

fn write(addr, val) {
  let a = (addr * SIZEOF_U32) as Ptr<u32>;
  *a = val;
}

fn checkPrimeSieve(n, count) {
  mut addr = 0;
  mut p = read(addr);
  while p * p <= n {
    if n % p == 0 { return false; }
    addr = addr + SIZEOF_U32;
    p = read(addr);
  }

  // add this prime to the sieve
  write(count * SIZEOF_U32, n);
  true
}

fn countPrimesLessThan(m) {
  // 2 is the first prime
  write(0, 2);
  mut i = 3;
  mut count = 1;

  while i <= m {
    if checkPrimeSieve(i, count) {
      count = count + 1
    }

    i = i + 2;
  }

  count
}

fn main() {
  countPrimesLessThan(10000000)
}